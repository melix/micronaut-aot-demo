plugins {
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application")
    id("io.micronaut.aot")
    //id("groovy")
}

version = "0.1"
group = "demo.app"

repositories {
    mavenLocal()
    mavenCentral()
}

micronaut {
    version = "3.2.0-SNAPSHOT"
//    version = "3.0.2-SNAPSHOT"
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("demo.app.*")
    }
    aot {
//        version = "1.0.1"
        sealEnvironment = true
        optimizeServiceLoading = true
        optimizeClassLoading = true
        convertYamlToJava = true
        precomputeOperations = true
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    //implementation("org.codehaus.groovy:groovy")
}


application {
    mainClass.set("demo.app.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

graalvmNative {
    binaries {
        optimized {
            verbose = true
            buildArgs.add("-H:DashboardDump=" + file("$buildDir/dump").absolutePath)
            buildArgs.add("-H:+DashboardAll")
            buildArgs.add("-H:+ReportExceptionStackTraces")

            // profiling
            buildArgs.add("-H:-DeleteLocalSymbols")
            buildArgs.add("-H:+PreserveFramePointer")
        }
    }
}

tasks.withType(JavaExec).configureEach {
    outputs.upToDateWhen { false }
}

def oNC = tasks.named("nativeOptimizedCompile")

tasks.register("perfRun", Exec) {
    dependsOn oNC
    argumentProviders.add(new CommandLineArgumentProvider() {
        @Override
        Iterable<String> asArguments() {
            def args = ["record", "-g", "-F", "100000", oNC.get().outputFile.get().asFile.absolutePath, "--call-graph", "dwarf"]
            println args
            args
        }
    })
    commandLine("perf")
    standardOutput = file("perf.data").newOutputStream()
}

tasks.named("optimizedRun", JavaExec) {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
//    debug = true
//    it.jvmArgs("-agentpath:/home/cchampeau/TOOLS/YourKit-JavaProfiler-2019.8/bin/linux-x86-64/libyjpagent.so=sampling,onexit=snapshot")
}
